@page "/form"
@using System.Collections.Generic
@using System.ComponentModel.DataAnnotations
@using Blazorise

<div class="container mt-5">
    <h2 class="text-center">Create</h2>

    <EditForm Model="@newTodo" OnValidSubmit="AddTodo">
        <DataAnnotationsValidator />

        <Div>
            <Label for="task" class="form-label">Title</Label>
            <InputText id="task" class="form-control" @bind-Value="@newTodo.Task" required />
            <ValidationMessage For="@(() => newTodo.Task)" />
        </Div>

        <Div>
            <Label for="description" class="form-label">Description</Label>
            <InputTextArea id="description" class="form-control" @bind-Value="@newTodo.Description" required />
            <ValidationMessage For="@(() => newTodo.Description)" />
        </Div>

        <Div>
            <Label for="dueDate" class="form-label">Due Date</Label>
            <InputDate id="dueDate" class="form-control" @bind-Value="@newTodo.DueDate" required />
            <ValidationMessage For="@(() => newTodo.DueDate)" />
        </Div>

        <Div style="display:flex;justify-content:center;align-items:center;">
            <Button Color="Color.Primary" Type="ButtonType.Submit" style="align-items:center">Add Task</Button>
        </Div>
    </EditForm>

    <Modal @bind-Visible="@showEditModal" Size="ModalSize.Large">
        <ModalContent class="modal-centered">
            <ModalHeader>
                <ModalTitle>Edit Task</ModalTitle>
            </ModalHeader>

            <EditForm Model="@selectedTodo" OnValidSubmit="UpdateTodo">
                <DataAnnotationsValidator />
                <ModalBody>
                    <Div>
                        <Label for="editTask" class="form-label">Title</Label>
                        <InputText id="editTask" class="form-control" @bind-Value="@selectedTodo.Task" required />
                        <ValidationMessage For="@(() => selectedTodo.Task)" />
                    </Div>
                    <Div>

                        <Label for="editDescription" class="form-label">Description</Label>
                        <InputTextArea id="editDescription" class="form-control" @bind-Value="@selectedTodo.Description" required />
                        <ValidationMessage For="@(() => selectedTodo.Description)" />
                    </Div>
                    <Div>


                        <Label for="editDueDate" class="form-label">Due Date</Label>
                        <InputDate id="editDueDate" class="form-control" @bind-Value="@selectedTodo.DueDate" required />
                        <ValidationMessage For="@(() => selectedTodo.DueDate)" />
                    </Div>
                    <Div>
                        <Label for="filePicker" class="form-label">Upload File</Label>
                        <FilePicker Multiple Upload="@(e => OnFileUpload(e, selectedTodo))"
                                    ShowMode="FilePickerShowMode.List" />

                    </Div>

                </ModalBody>

                <Div style="display:flex;justify-content:center;align-items:center;">
                    <Button Color="Color.Primary" Type="ButtonType.Submit" style="align-items:center">Update Task</Button>
                </Div>

            </EditForm>

        </ModalContent>
    </Modal>

    <Modal @bind-Visible="@showSuccessModal" Size="ModalSize.Large">
        <ModalContent class="text-center modal-centered">
            <div>
                <i class="fa fa-check-circle text-success" style="font-size: 60px;"></i>
                <h2>Great!</h2>
                <p>Your task has been added successfully.</p>
                <Button Color="Color.Success" @onclick="CloseSuccessModal">Back</Button>
            </div>
        </ModalContent>
    </Modal>

    <Modal @bind-Visible="@showFailureModal" Size="ModalSize.Large">
        <ModalContent class="text-center modal-centered">
            <div>
                <i class="fa fa-times-circle text-danger" style="font-size: 60px;"></i>
                <h2>Oops!</h2>
                <p>Failed to add your task. Please try again.</p>
                <Button Color="Color.Danger" @onclick="CloseModal">Close</Button>
            </div>
        </ModalContent>
    </Modal>

    <h3 class="mt-4">Details</h3>
    <div class="card">
        <div class="card-body">
            <ul class="list-group">
                @if (todos.Count == 0)
                {
                    <li class="list-group-item">No tasks available.</li>
                }
                else
                {
                    @foreach (var todo in todos)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <Div>
                                <strong>@todo.Task</strong><br />
                                <span>@todo.Description</span><br />
                                @if (todo.DueDate.HasValue)
                                {
                                    <span class="badge bg-secondary">@todo.DueDate.Value.ToShortDateString()</span>
                                }<br />
                                @if (!string.IsNullOrEmpty(todo.UploadedFiles))
                                {
                                    <span class="badge bg-info">@todo.UploadedFiles</span>
                                }
                            </Div>
                            <Div>
                                <Button Color="Color.Primary" Size="Size.Small" @onclick="@(() => OpenEditModal(todo))">Edit</Button>
                                <Button Color="Color.Danger" Size="Size.Small" @onclick="@(() => RemoveTodo(todo))">Delete</Button>
                            </Div>
                        </li>
                    }
                }
            </ul>
        </div>
    </div>
</div>

<style>
    .modal-centered {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 50vh;
        flex-direction: column;
    }
</style>

@code {
    public class TodoItem
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Task title is required.")]
        public string? Task { get; set; }

        [Required(ErrorMessage = "Description is required.")]
        public string? Description { get; set; }

        [Required(ErrorMessage = "Due date is required.")]
        public DateTime? DueDate { get; set; }
        public string? UploadedFiles { get; set; }

    }


    private List<TodoItem> todos = new List<TodoItem>();
    private TodoItem newTodo = new TodoItem();
    private TodoItem selectedTodo = new TodoItem();
    private bool showSuccessModal = false;
    private bool showFailureModal = false;
    private bool showEditModal = false;



    public void AddTodo()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(newTodo.Task))
            {

                newTodo.Id = todos.Count > 0 ? todos.Max(t => t.Id) + 1 : 1;

                var success = ProcessTaskAddition(newTodo);

                if (success)
                {
                    todos.Add(new TodoItem { Id = newTodo.Id, Task = newTodo.Task, Description = newTodo.Description, DueDate = newTodo.DueDate });
                    newTodo = new TodoItem();
                    ShowSuccessModal();
                }
                else
                {
                    ShowFailureModal();
                }
            }
            else
            {
                ShowFailureModal();
            }
        }
        catch (Exception)
        {
            ShowFailureModal();
        }
    }

    private void OpenEditModal(TodoItem todo)
    {
        selectedTodo = new TodoItem
            {
                Id = todo.Id,
                Task = todo.Task,
                Description = todo.Description,
                DueDate = todo.DueDate
            };
        showEditModal = true;
    }

    public void UpdateTodo()
    {
        var index = todos.FindIndex(t => t.Id == selectedTodo.Id);
        if (index >= 0)
        {
            todos[index].Task = selectedTodo.Task;
            todos[index].Description = selectedTodo.Description;
            todos[index].DueDate = selectedTodo.DueDate;
            todos[index].UploadedFiles = selectedTodo.UploadedFiles;

            showEditModal = false;
            ShowSuccessModal();
        }
        else
        {
            ShowFailureModal();
        }
    }

    private void RemoveTodo(TodoItem todo)
    {
        todos.Remove(todo);
        ShowSuccessModal();
    }

    private void ShowSuccessModal() => showSuccessModal = true;
    private void CloseSuccessModal() => showSuccessModal = false;
    private void ShowFailureModal() => showFailureModal = true;
    private void CloseModal() => showFailureModal = false;

    private bool ProcessTaskAddition(TodoItem todoItem)
    {

        return true;
    }
    async Task OnFileUpload(FileUploadEventArgs e, TodoItem todo)
    {
        try
        {
            using (MemoryStream result = new MemoryStream())
            {
                await e.File.OpenReadStream(long.MaxValue).CopyToAsync(result);
                todo.UploadedFiles = e.File.Name;
            }
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            this.StateHasChanged();
        }
    }

}
